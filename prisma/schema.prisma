generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(CUSTOMER)
  orders    Order[]
  cart      CartItem[]
  reviews   Review[]
  wishlist  Wishlist[]
  addresses Address[]
  createdAt DateTime   @default(now())
  Payment   Payment[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  cartItems   CartItem[]
  wishlist    Wishlist[]
  payments    Payment[]
  createdAt   DateTime   @default(now())
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
}

model Order {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  items           CartItem[]
  totalPrice      Float
  payment         Payment?
  paymentMethod   String
  shippingAddress String
  status          OrderStatus    @default(PENDING)
  tracking        OrderTracking?
  createdAt       DateTime       @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int // Between 1-5
  comment   String?
  createdAt DateTime @default(now())
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
}

model Payment {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  user          User          @relation(fields: [userId], references: [id]) // ✅ Add userId
  userId        String // ✅ Add userId
  amount        Float
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  Product       Product?      @relation(fields: [productId], references: [id])
  productId     String?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderTracking {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique // ✅ Fix: Add @unique for one-to-one relationship
  status    String   @default("Processing")
  updatedAt DateTime @updatedAt
}
